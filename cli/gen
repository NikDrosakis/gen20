#!/bin/bash

# ==================================================
# gen20 CLI v1
# ==================================================
# A command-line interface (CLI) for managing various services, scripts, and tasks
# within the gen20 ecosystem. This script acts as a central entry point for executing
# commands related to Gaia, Redis, Composer, and other services.
#
# Usage:
#   gen <system> <command> [args...]
#
# Examples:
#   gen gaia buildTable gen_admin.globs
#   gen composer install
#   gen redis
#   gen start  # Start the daemon
#   gen stop   # Stop the daemon
# ==================================================

# ==================================================
# Configuration
# ==================================================
ROOT="/var/www/gs"                     # Root directory of the application
CLI_ROOT="$ROOT/cli"               # Directory for CLI scripts
COMMON="$CLI_ROOT/utils.sh"          # Path to the utils.sh script
LOG_DIR="$ROOT/log"               # Directory for log files
LOG_FILE="$ROOT/log/cli.log"    # Log file for the CLI
BACKUP_DIR="$ROOT/backup"               # Directory for log files
BG_DIR="$CLI_ROOT/bg"                   # Directory for background processes
BIN="$CLI_ROOT/bin"                   # Directory for background processes
DAEMON="$BG_DIR/daemon-update.sh"       # Path to the daemon script
PID_FILE="$BG_DIR/gen-daemon.pid"          # PID file for the daemon
COM_DIR="$CLI_ROOT/com"                # Base directory for command scripts
# ==================================================
# Measure Execution Time
# ==================================================
START_TIME=$(date +%s%N) # Capture start time in nanoseconds

# ==================================================
# Load Environment Variables
# ==================================================
ENV_FILE="$ROOT/.env"             # Path to the .env file
if [ -f "$ENV_FILE" ]; then
    source "$ENV_FILE"                  # Load the .env file
else
    echo "‚ùå Error: Missing .env file."
    exit 1
fi

# ==================================================
# Load CLI Utilities
# ==================================================
if [ -f "$COMMON" ]; then
    source "$COMMON"                 # Load the utils.sh script
else
    echo "‚ùå Error: Missing utils.sh file."
    exit 1
fi

# ==================================================
# Validate Input Parameters
# ==================================================
if [ -z "$1" ]; then
    echo "‚ùå Error: Usage: $0 <system> <command> [args...]"
    exit 1
fi


COMMAND="$1"                            # First argument: System or command
FILENAME="$2"                           # Second argument: Script or subcommand

# ŒüœÅŒØŒ∂ŒøœÖŒºŒµ œÑŒπœÇ Œ¥œÖŒΩŒ±œÑŒ≠œÇ ŒµœÄŒπŒªŒøŒ≥Œ≠œÇ Œ≥ŒπŒ± œÑŒ∑ŒΩ ŒøŒºŒ¨Œ¥Œ± (folders)
GEN_COMMANDS=("chat" "domain" "ermis" "mars" "god" "kronos" "cubos" "ws" "ai" "git")
# ŒüœÅŒπœÉŒºœåœÇ œÑŒ∑œÇ œÉœÖŒΩŒ¨œÅœÑŒ∑œÉŒ∑œÇ autocompletion Œ≥ŒπŒ± œÑŒ∑ŒΩ ŒµŒΩœÑŒøŒªŒÆ 'gen'
complete -F _gen_autocomplete gen

parsed_args=$(parse_args "$@")

# ==================================================
# Command Handling
# ==================================================
case "$COMMAND" in
    # ==============================================
    # Daemon Commands
    # ==============================================
    start)
        bash "$DAEMON" start            # Start the daemon
        ;;
    restart)
        bash "$DAEMON" restart         # Restart the daemon
        ;;
    stop)
        bash "$DAEMON" stop             # Stop the daemon
        ;;
    status)
           bash "$DAEMON" status           # Check daemon status
           ;;
    kill)
           bash "$BIN/kill.sh" "$@"  # Pass all arguments through
      ;;
    wget)
    wget -r -l 1 -A.html -P $ROOT/$3 https://$FILENAME
    ;;
    ports)
        netstat -tulnp | grep LISTEN     # Check open ports
        ;;
    find:large)
      echo "Searching for files >500MB across the system..."
      sudo find / -type f -size +500M -exec ls -lh {} \; 2>/dev/null
      ;;
    net:info)
        echo "Fetching detailed network information..."
        echo "Public IP: $(curl -s ifconfig.me)"
        echo "DNS Resolvers: $(cat /etc/resolv.conf | grep nameserver)"
        echo "Active Interfaces:"
        ip -brief a
        echo "Open Network Ports:"
        sudo netstat -tulnp | grep LISTEN
        ;;
    net:speed)
        echo "Running network speed test..."
        speetest
        ;;
     history:grep)
            if [ -z "$FILENAME" ]; then
                echo "Usage: gen history:grep <keyword>"
                exit 1
            fi
            echo "Searching shell history for '$2'..."
            history | grep "$2"
            ;;
    top)
      echo "Showing top 10 processes by CPU usage..."
      ps -eo pid,user,%cpu,%mem,command --sort=-%cpu | head -n 11
      ;;
    performance)
        echo "Checking system performance..."
        echo "CPU Load:"
        uptime
        echo "Memory Usage:"
        free -m
        echo "Disk Usage:"
        df -h
        ;;
    log)
       tail -f "/$ROOT/log/$FILENAME.log"       # Live log monitoring
       ;;
    # ==============================================
    # Execute Scripts for All Commands
    # ==============================================
    all)
        if [ -n "$FILENAME" ]; then
            # Loop through all directories in $COM_DIR
            for dir in "$COM_DIR"/*/; do
                CMD_NAME=$(basename "$dir")  # Get the command name
                SCRIPT="$dir/$FILENAME.sh"   # Path to the script
                if [ -f "$SCRIPT" ]; then
                    echo "‚ñ∂ Executing $CMD_NAME/$FILENAME.sh..."
                    bash "$SCRIPT"          # Execute the script
                else
                    echo "‚ö† Missing script for $CMD_NAME/$FILENAME"
                fi
            done
        else
            echo "‚ùå Error: FILENAME is not specified."
            exit 1
        fi
        ;;

    # ==============================================
    # Language-Specific Commands
    # ==============================================
    php|python|go|node)
        interpreter="${COMMAND}"        # Store the interpreter name
        script_name="${FILENAME}"       # Store the script name
        if [ -f "$script_name" ]; then
            "${interpreter}" "${script_name}"  # Execute the script
        else
            echo "‚ùå Error: File $script_name not found."
        fi
        ;;

    # ==============================================
    # Custom Commands (Ermis, Mars, God, etc.)
    # ==============================================
    domain:nginx)
        echo "Listing active domains from Nginx..."
        grep -r "server_name" /etc/nginx/conf.d/ | awk '{print $3}' | tr -d ';'
        ;;
      domain:ssl)
          echo "Checking active SSL certificates..."
          sudo ls -1 /etc/letsencrypt/live/
          ;;
        maria:dump)
            echo "Dumping all MariaDB databases..."
            mysqldump -u root --all-databases > $BACKUP_DIR/mariadb_backup_$(date +%F).sql
            echo "Backup saved at ~/mariadb_backup_$(date +%F).sql"
            ;;
          maria:compare)
              if [ -z "$2" ] || [ -z "$3" ]; then
                  echo "Usage: gen maria:compare <db1> <db2>"
                  exit 1
              fi
              echo "Comparing MariaDB databases: $2 vs $3..."
              mysqldump -u root "$2" | grep -v "Dump completed" > /tmp/db1.sql
              mysqldump -u root "$3" | grep -v "Dump completed" > /tmp/db2.sql
              diff -u /tmp/db1.sql /tmp/db2.sql
              ;;
             elastic)
                 echo "Fetching Elasticsearch index status..."
                 curl -s "http://localhost:9200/_cat/indices?v"
                 ;;
               arango)
                   echo "Listing ArangoDB collections..."
                   curl -s -u root:password "http://localhost:8529/_api/collection" | jq '.result[].name'
                   ;;
                 php:lint)
                     if [ -z "$2" ]; then
                         echo "Usage: gen php:lint <file.php>"
                         exit 1
                     fi
                     echo "Linting PHP file: $2"
                     php -l "$2"
                     ;;
                   history:grep)
                       if [ -z "$2" ]; then
                           echo "Usage: gen history:grep <keyword>"
                           exit 1
                       fi
                       echo "Searching history for '$2'..."
                       history | grep --color=auto "$2"
                       ;;
chat|domain|ermis|mars|god|kronos|cubos|ws|ai|git)
    if [ -z "$FILENAME" ]; then
        echo "‚ùå Error: FILENAME is not specified for $COMMAND."
    else
        # Execute the custom script and pass all additional arguments
        bash "$CLI_ROOT/com/$COMMAND/$FILENAME.sh" "$@"
        exit 1
    fi
    ;;
    # ==============================================
    # Redis CLI
    # ==============================================
    redis)
        redis-cli --auth "yjF1f7uiHttcp"  # Connect to Redis with authentication
        ;;

    # ==============================================
    # Composer Commands
    # ==============================================
    composer)
        su - dros -c "cd '$ROOT/gaia' && composer '$FILENAME'"  # Run Composer as the 'dros' user
        ;;

    # ==============================================
    # Gaia Commands
    # ==============================================
    permissions)
      echo "‚ñ∂ Applying permissions to: $ROOT"
      # Change ownership recursively
      chown -R dros:dros "$ROOT"
      # Make everything executable
      chmod -R +x "$ROOT"
      echo "‚úî Permissions applied successfully!"
       ;;
    tree)
      /usr/bin/tree -L 2 -d "$ROOT"
      ;;
    help)
      declare -A COMMAND_SCRIPTS
      echo "üìå Gen20 CLI - Available Commands"
        echo "-----------------------------------"
        for dir in "$COM_DIR"/*/; do
            cmd_name=$(basename "$dir")
            echo "‚ñ∂ $cmd_name"
            for script in "$dir"/*.sh; do
                if [[ -f "$script" ]]; then
                    subcmd_name=$(basename "$script" .sh)
                    echo "   ‚îú‚îÄ‚îÄ $subcmd_name"
                fi
            done
        done
          ;;
    gaia)
        if [ -n "$FILENAME" ]; then
            # Pass all arguments to the Gaia PHP script
            php "$CLI_ROOT/com/gaia/index.php" "$@" 2> >(bash "$COM_DIR/ai/review.sh")
        else
            echo "‚ùå Error: FILENAME is not specified for Gaia."
            exit 1
        fi
        ;;

    # ==============================================
    # Unknown Command
    # ==============================================
    *)
        echo "‚ùå Unknown CLI service: $COMMAND"
        exit 1
        ;;
esac
# ==================================================
# ERROR AI SUGGEST
# ==================================================
ERROR_HANDLER_SCRIPT="$COM/ai/review.sh"
# Catch errors and redirect to error handler
trap 'bash "$ERROR_HANDLER_SCRIPT" "$(tail -n 1 /var/log/syslog)"' ERR
# ==================================================
# Calculate Execution Time
# ==================================================
END_TIME=$(date +%s%N) # Capture end time
ELAPSED_TIME=$(( (END_TIME - START_TIME) / 1000000 )) # Convert to milliseconds
echo "‚è± Execution Time: $ELAPSED_TIME ms"
