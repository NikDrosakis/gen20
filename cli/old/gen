#!/bin/bash

# Define the base directory for all commands
ROOT="/var/www/gs"
BASE_DIR="$ROOT/cli"

# Load version from .env
ENV_FILE="/var/www/gs/.env"
if [ -f "$ENV_FILE" ]; then
    source "$ENV_FILE"
else
    GEN_VERSION="Unknown"
fi

# Display the version number
echo "Running gen version: $GEN_VERSION"

# Check if a command is provided
if [ -z "$1" ]; then
    echo "Usage: gen <command>"
    exit 1
fi

COMMAND="$1"

# Handle 'gen bin list'
# Check if $2 is provided (i.e., a specific file is being requested)
if [ "$COMMAND" == "bin" ]; then
    if [ "$2" == "list" ]; then
        echo "Listing files in the bin directory:"
        # Loop through files in the bin directory
        for file in "$BASE_DIR/bin/"*; do
            if [[ -f "$file" && -x "$file" ]]; then
                description="..."  # Default description if not found

                # Read through the file to find the description
                while IFS= read -r line; do
                    # Check if the line contains a description
                    if [[ "$line" =~ ^description= ]]; then
                        description="${line#*=}"
                        description="${description//\"/}"  # Remove any surrounding quotes
                        break
                    fi
                done < "$file"

                # Strip the .sh extension
                file_name="${file##*/}"  # Extract the file name from the full path
                file_name="${file_name%.sh}"  # Remove the .sh extension

                # Print the filename and extracted description
                echo "$file_name - $description"
            fi
        done
        exit 0
    elif [ -n "$2" ]; then
        FILE="$2"
        echo "Looking for file: $BASE_DIR/bin/$FILE"
        if [[ -f "$BASE_DIR/bin/$FILE.sh" && -x "$BASE_DIR/bin/$FILE.sh" ]]; then
            echo "Executing $FILE inside bin directory with bash..."
            bash "$BASE_DIR/bin/$FILE.sh"  # Explicitly using bash to execute the file
            echo "$FILE execution completed."
            exit $?
        else
            echo "Error: $FILE does not exist or is not executable."
            exit 1
        fi
    else
        echo "Usage: gen bin list | gen bin <file>"
        exit 1
    fi
fi

# Assuming you're passing `method` and `param` as arguments
# Handle 'gen gaia'
if [ "$COMMAND" == "gaia" ]; then
    if [ -n "$2" ]; then
        METHOD="$2"
        PARAM="$3"  # Capture the parameter for the method

        # Execute the PHP script with the method and param
        php "$BASE_DIR/gaia/index.php" "$METHOD" "$PARAM"

        # Capture the exit status of the PHP script
        EXIT_STATUS=$?

        # Exit with the status from the PHP script
        exit $EXIT_STATUS
    else
        echo "Usage: gen gaia [method] [param]"
        exit 1
    fi
fi



# Handle other commands
if [[ -d "$BASE_DIR/$COMMAND" ]]; then
    echo "Listing contents of $COMMAND:"
    ls -l "$BASE_DIR/$COMMAND"
    exit 0
fi

if [[ -f "$BASE_DIR/$COMMAND.php" ]]; then
    echo "Running PHP file: $COMMAND.php"
    php "$BASE_DIR/index.php" "$COMMAND.php"
    exit $?
elif [[ -f "$BASE_DIR/$COMMAND.sh" ]]; then
    echo "Running Bash script: $COMMAND.sh"
    bash "$BASE_DIR/$COMMAND.sh"
    exit $?
elif [[ -x "$BASE_DIR/$COMMAND" ]]; then
    echo "Running executable: $COMMAND"
    "$BASE_DIR/$COMMAND"
    exit $?
else
    echo "Command not found: $COMMAND"
    exit 1
fi
